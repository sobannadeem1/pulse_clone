import"./faceplate-switch-input-dd3c0cb2.js";import{_ as e,n as t,e as s,et as o,f0 as i,aF as n,aG as a,f1 as r,eu as c,f2 as d,f3 as l,f4 as p,f5 as h}from"./shell-97fd3bd7.js";import{s as y,x as u}from"./icon-6e78539e.js";import{u as m}from"./community-colors-fdbc28a7.js";import{D as f}from"./display-theme-7e251d41.js";import"./checked-input-element-605d976f.js";import"./faceplate-input-35f305aa.js";import"./input-element-c3273c12.js";import"./form-common-utils-3a6d5fab.js";import"./constants-95a2ecae.js";let b=class extends y{constructor(){super(...arguments),this.enabled=!1,this.country=""}handler(e){e.preventDefault(),o({country:this.country,name:i,value:this.enabled?"false":"true"}),window.location.reload()}render(){return u`<div @click="${this.handler}" @keypress="${this.handler}">\n <slot></slot>\n </div>`}};e([t({type:Boolean})],b.prototype,"enabled",void 0),e([t({type:String})],b.prototype,"country",void 0),b=e([s("shreddit-modmode-setter")],b);let k=class extends y{constructor(){super(...arguments),this.enabled=!1,this.country="",this.cookieDomain="",this.sync=!1}async connectedCallback(){super.connectedCallback(),this.sync&&this.syncCookieToUserPreference()}async syncCookieToUserPreference(){try{const{data:e}=await n({operation:a.IdentityUserPreferences,variables:{includeNightMode:!0}}),t=e.identity?.preferences?.isNightModeEnabled;if(null==t)return;t!==this.enabled&&(this.enabled=t,this.updateClientStyles(),this.setCookie(),this.reportMismatch())}catch{}}setCookie(){o({country:this.country,name:r,value:this.enabled?f.Darkmode:f.Lightmode,options:{...c,domain:this.cookieDomain||void 0}})}async setUserPreference(){await n({operation:a.UpdateAccountPreferences,variables:{input:{isNightModeEnabled:this.enabled}}})}updateClientStyles(){m({isDarkMode:this.enabled});const e=this.querySelector("faceplate-switch-input");e&&(e.checked=this.enabled)}reportMismatch(){const e=d(this.country)&&!l(),t={cookies_enabled:navigator.cookieEnabled&&!e?"true":"false"};p({type:h.Counter,name:"shreddit_darkmode_preference_mismatches",value:1,labels:t})}async handler(e){e.preventDefault(),this.enabled=!this.enabled,this.updateClientStyles(),this.setCookie(),await this.setUserPreference()}handleKeypress(e){"Enter"!==e.key&&"Space"!==e.key||this.handler(e)}render(){return u`<div @click="${this.handler}" @keypress="${this.handleKeypress}">\n <community-colors></community-colors>\n <slot></slot>\n </div>`}};e([t({type:Boolean,reflect:!0})],k.prototype,"enabled",void 0),e([t({type:String})],k.prototype,"country",void 0),e([t({type:String,attribute:"cookie-domain"})],k.prototype,"cookieDomain",void 0),e([t({type:Boolean})],k.prototype,"sync",void 0),k=e([s("shreddit-darkmode-setter")],k);
//# sourceMappingURL=user-drawer-client-js-13e41879.js.map
